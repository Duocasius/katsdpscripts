from __future__ import with_statement

import optparse
import uuid
import sys
import time
import re

import numpy as np

import katuilib
import katpoint

targets = {'ant1' : (25.119, -8.944, 0.083),
           'ant2' : (90.315, 26.648, -0.067),
           'ant3' : (3.989, 26.925, -0.006),
           'ant4' : (-21.600, 25.500, 0.000),
#           'ant1' : (18.4, -8.7, 0),
#           'ant2' : (86.2, 25.5, 0),
#           'ant3' : (3.2, 27.3, 0),
#           'ant4' : (-21.6, 25.5, 0),
           'ant5' : (-37.5, -1.3, 0),
           'ant6' : (-61.5, -78.0, 0),
           'ant7' : (-87.8, 76.3, 0),
           'asc' : (57, -27, 0),
           '12m' : (45, -43, 0),
#           'asc' : (46, -27, 0),
#           '12m' : (33, -43, 0),
           'minister' : (40., -40., 0),
           'origin' : (63.7, -32.9, 0)}

def enu_to_azel(e, n, u):
    """Convert vector in ENU coordinates to (az, el) spherical coordinates.

    This converts a vector in the local east-north-up (ENU) coordinate system to
    the corresponding horizontal spherical coordinates (azimuth and elevation
    angle). The ENU coordinates can be in any unit, as the vector length will be
    normalised in the conversion process.

    Parameters
    ----------
    e, n, u : float or array
        East, North, Up coordinates (any unit)

    Returns
    -------
    az_rad, el_rad : float or array
        Azimuth and elevation angle, in radians

    """
    return np.arctan2(e, n), np.arctan2(u, np.sqrt(e * e + n * n))

# Parse command-line options that allow the defaults to be overridden
parser = optparse.OptionParser(usage="%prog [options] <target>",
                               description="Point dishes at the given target and record data.")
# Generic options
parser.add_option('-i', '--ini_file', dest='ini_file', type="string", metavar='INI', help='Telescope configuration ' +
                  'file to use in conf directory (default reuses existing connection, or falls back to cfg-local.ini)')
parser.add_option('-s', '--selected_config', dest='selected_config', type="string", metavar='SELECTED',
                  help='Selected configuration to use (default reuses existing connection, or falls back to local_ff)')
parser.add_option('-u', '--experiment_id', dest='experiment_id', type="string",
                  help='Experiment ID used to link various parts of experiment together (UUID generated by default)')
parser.add_option('-o', '--observer', dest='observer', type="string",
                  help='Name of person doing the observation (**required**)')
parser.add_option('-d', '--description', dest='description', type="string",
                  help='Description of observation, optional')
parser.add_option('-a', '--ants', dest='ants', type="string", metavar='ANTS',
                  help="Comma-separated list of antennas to include in scan (e.g. 'ant1,ant2')," +
                       " or 'all' for all antennas (**required** - safety reasons)")
parser.add_option('-f', '--centre_freq', dest='centre_freq', type="float", default=1822.0,
                  help='Centre frequency, in MHz (default=%default)')
parser.add_option('-r', '--dump_rate', dest='dump_rate', type="float", default=10.0,
                  help='Dump rate, in Hz (default=%default)')
parser.add_option('-t', '--duration', dest='duration', type="float", default=60.0,
                  help='Duration to run experiment, in seconds (default=%default)')
(opts, args) = parser.parse_args()

if len(args) == 0:
    print "Please specify one target argument (via name or coords, e.g. 'ant1' or '(50,50,0)')"
    sys.exit(1)
elif len(args) > 1:
    print "Please specify only one target argument (if using coords, don't include spaces, e.g. use '(50,50,0)')"
    sys.exit(1)
target = args[0]

if target in targets:
    target_enu = targets[target]
else:
    try:
        target_enu = tuple(float(coord) for coord in target.strip('\n\t ()[]').split(','))
        target = target.replace(',', '/')
    except ValueError:
        print "Unknown target '%s', should be one of %s" % (target, targets.keys())
        sys.exit(1)
if len(target_enu) != 3:
    print "Please provide 3 coordinates (east, north, up)"
    sys.exit(1)

# Various non-optional options...
if opts.ants is None:
    print 'Please specify the antennas to use via -a option (yes, this is a non-optional option...)'
    sys.exit(1)
if opts.observer is None:
    print 'Please specify the observer name via -o option (yes, this is a non-optional option...)'
    sys.exit(1)
if opts.experiment_id is None:
    # Generate unique string via RFC 4122 version 1
    opts.experiment_id = str(uuid.uuid1())
if opts.description is None:
    opts.description = "Data recorded while pointing at '%s'" % target

# Try to build the given KAT configuration (which might be None, in which case try to reuse latest active connection)
# This connects to all the proxies and devices and queries their commands and sensors
try:
    kat = katuilib.tbuild(opts.ini_file, opts.selected_config)
# Fall back to *local* configuration to prevent inadvertent use of the real hardware
except ValueError:
    kat = katuilib.tbuild('cfg-local.ini', 'local_ff')
print "\nUsing KAT connection with configuration: %s\n" % (kat.get_config(),)

with katuilib.CaptureSession(kat, opts.experiment_id, opts.observer, opts.description, opts.ants, opts.centre_freq, opts.dump_rate) as session:
    ants = session.ants
    ants.req.drive_strategy('shortest-slew')
    for ant in ants.devs:
        antenna = katpoint.Antenna(ant.sensor.observer.get_value())
        enu = np.asarray(target_enu) - np.asarray(antenna.position_enu)
        if np.all(enu == 0):
            enu = np.array([0, 0, 1])
        az, el = enu_to_azel(*enu)
        az, el = katpoint.rad2deg(az), katpoint.rad2deg(el)
        # Go to nearest point on horizon if target is below elevation limit
        el = max(el, 2.0)
        target_description = "%s, azel, %f, %f" % (target, az, el)
        print "From antenna '%s', target '%s' with enu = (%g, %g, %g) has azel = (%g, %g)" % \
              (antenna.name, target, enu[0], enu[1], enu[2], az, el)
        ant.req.target(target_description)
    kat.dbe.req.target(target_description)
    print 'Slewing to target'
    ants.req.mode('POINT')
    ants.wait('lock', True, 300)
    print 'Start capturing'
    kat.dbe.req.k7w_new_compound_scan(target_description, 'enu', 'scan')
    kat.dbe.req.capture_start()
    time.sleep(opts.duration)
#   session.fire_noise_diode(diode='coupler', on_duration=10.0, off_duration=10.0)
