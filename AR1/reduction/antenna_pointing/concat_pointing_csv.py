#!/usr/bin/python
##Concat list of .csv files generated by analyse_point_source_scan
# python concat_pointing_csv.py -a m063 -e -v *.csv
#
# Revision History:
# * (Ruby) Initial implementation

import optparse
import numpy
import matplotlib.pyplot as plt

# Simple function that reads in a file and writes it to a concat file
def concatcsv(infile, outfile, writeheaders=False):
    fin = open(infile, 'rb')
    header1=fin.readline()
    header2=fin.readline()
    data = fin.readlines()
    fin.close()

    fout = open(outfile, 'ab')
    if writeheaders:
        fout.write(header1)
        fout.write(header2)
    for line in data:
        fout.write(line)
    fout.close()

def data_graphs(filename):
    fin = open(filename, 'rb')
    # ignore example header
    header1=fin.readline()
    # process header to get column headings
    header2=fin.readline()
    data = fin.readlines()
    fin.close()

    headings = [x.strip() for x in header2.strip().split(',')]
    az_idx = headings.index('azimuth')
    daz_idx = headings.index('delta_azimuth')
    daz_std_idx = headings.index('delta_azimuth_std')
    el_idx = headings.index('elevation')
    del_idx = headings.index('delta_elevation')
    del_std_idx = headings.index('delta_elevation_std')

    # skyplot
    az=[]
    el=[]
    d_az=[]
    d_el=[]
    dstd_az=[]
    dstd_el=[]
    for line in data:
        az.append(line.strip().split(',')[az_idx])
        el.append(line.strip().split(',')[el_idx])
        d_az.append(line.strip().split(',')[daz_idx])
        dstd_az.append(line.strip().split(',')[daz_std_idx])
        d_el.append(line.strip().split(',')[del_idx])
        dstd_el.append(line.strip().split(',')[del_std_idx])
    az = numpy.array(az, dtype=float)
    el = numpy.array(el, dtype=float)
    d_az = numpy.array(d_az, dtype=float)
    d_el = numpy.array(d_el, dtype=float)
    dstd_az = numpy.array(dstd_az, dtype=float)
    dstd_el = numpy.array(dstd_el, dtype=float)

    fig = plt.figure()
    ax = fig.add_subplot(1,1,1,projection='polar')
    ax.plot(az, el, '.')
    plt.title(filename)
    fig.savefig('skycoverage.png', dpi=300)

    fig = plt.figure()
    ax1 = fig.add_subplot(2,1,1)
    ax1.plot(d_el, 'b.', label=r'$\delta$ el')
    ax1.plot(d_az, 'r.', label=r'$\delta$ az')
    plt.title(filename)
    ax1.legend(loc=0)
    ax2 = fig.add_subplot(2,1,2)
    ax2.plot(dstd_el, 'b.', label=r'$\delta$ el std')
    ax2.plot(dstd_az, 'r.', label=r'$\delta$ az std')
    ax2.legend(loc=0)
    fig.savefig('positionerrors.png', dpi=300)


## -- Main --
if __name__ == '__main__':

    # Parse command-line opts and arguments
    parser = optparse.OptionParser(usage="%prog [opts] <analyse_point_source_scans_file(s).csv>",
                                   description="Concat results from analyse_point_source_scan for evaluation of single dish pointing.")
    parser.add_option('-o', '--output', dest='outfile', default=None,
                      help="Name of concatenated output .csv file")
    parser.add_option('-a', '--antenna', dest='ant', default=None,
                      help="Antenna name associated with csv files to concatenate.")
    parser.add_option('-e', '--verif', action='store_true', dest='verif', default=False,
                      help='Produce output plots for visual verification')
    parser.add_option('-v', '--verbose', action='store_true', dest='verbose', default=False,
                      help='Display raster scan beam fit')
    (opts, args) = parser.parse_args()

    if len(args)<0 or not args[0].endswith('.csv'):
        raise RuntimeError('Please specify CSV data file(s) as argument to the script')

    if opts.outfile is None and opts.ant is None: opts.outfile='concat_point_source_scans.csv'
    if opts.outfile is None and opts.ant is not None: opts.outfile='concat_%s_point_source_scans.csv'%opts.ant

    # create empty file and test that you can write to it
    try:
        fout = open(opts.outfile, 'wb')
        fout.close()
    except:
        raise RuntimeError('Cannot write file %s' % opts.outfile)

    # create big concatenated file
    print('Concatenating to file: %s' % opts.outfile)
    headers = True
    for filename in args:
        print('Reading file %s' % filename)
        concatcsv(filename, opts.outfile, writeheaders=headers)
        headers = False

    # output plots for verification
    if opts.verif:
        data_graphs(opts.outfile)


    # Display plots - this should be called ONLY ONCE, at the VERY END of the script
    # The script stops here until you close the plots...
    if opts.verbose: plt.show()

    # cleanup before exit
    try: plt.close('all')
    except: pass # nothing to close

# -fin-
